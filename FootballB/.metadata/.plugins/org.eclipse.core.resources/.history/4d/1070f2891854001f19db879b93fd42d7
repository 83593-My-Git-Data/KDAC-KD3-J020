package com.app.services;
import javax.transaction.Transactional;
import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.custom_exceptions.ResourceNotFoundException;
import com.app.dtos.ApiResponse;
import com.app.dtos.LoginDTO;
import com.app.dtos.UpdateUserDTO;
import com.app.dtos.UserDTO;
import com.app.entities.Role;
import com.app.entities.Team;
import com.app.entities.User;
import com.app.repositories.UserRepository;


@Service
@Transactional
public class UserServiceImpl implements UserService {

    private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private ModelMapper mapper;

//	@Autowired
//	private PasswordEncoder encoder;
	
	@Override
	public UserDTO registerUser(@Valid UserDTO dto) {
        logger.debug("Received registration request: {}", dto);

		if (!dto.getPassword().equals(dto.getConfirmPassword())) {
            throw new IllegalArgumentException("Password and Confirm Password do not match");
        }
		if (userRepo.findByEmailId(dto.getEmailId()) != null) {
            throw new IllegalArgumentException("Email already registered");
        }

        try {
            User user = mapper.map(dto, User.class);
//            user.setPassword(passwordEncoder.encode(dto.getPassword()));
            user.setRole(Role.ROLE_CLIENT);

            Team team = new Team();
            team.setTeamName(dto.getTeamName());
//            team.setEmailId(dto.getEmailId());
            team.setUser(user);

            user.setTeam(team);
           
            logger.debug("Saving user: {}", user);
            logger.debug("Saving team: {}", team);

            User newUser = userRepo.save(user);
            logger.debug("User saved successfully: {}", newUser);

            return mapper.map(newUser, UserDTO.class);
        } catch (Exception e) {
            logger.error("Failed to register user", e);
            throw new RuntimeException("Failed to register user: " + e.getMessage(), e);
        }
//		User user = mapper.map(dto, User.class);
//		user.setRole(Role.ROLE_CLIENT);
//		
//		Team team = new Team();
//        team.setTeamName(dto.getTeamName());
//        team.setUser(user);
//        user.setTeam(team);
//		
//		User newUser = userRepo.save(user);
//		return mapper.map(newUser, UserDTO.class);
	}
	

	@Override
	public ApiResponse changePassword(LoginDTO dto) {
		User user = userRepo.findByEmailId(dto.getEmailId());
		if (user != null) {
			user.setPassword(dto.getPassword());
			userRepo.save(user);
			return new ApiResponse("Password Changed Successfully!!!");
		}
		throw new ResourceNotFoundException("Invalid Email Or Password");	}

	@Override
	public UserDTO updateUser(Long id, UpdateUserDTO dto) {
		if (userRepo.existsById(id)) {
			User existingUser = userRepo.findById(id).orElse(null);

			if (existingUser != null) {
				existingUser.setName(dto.getClientName());
//				existingUser.setTeam(dto.getTeamName());
				existingUser.setEmailId(dto.getEmailId());
				existingUser.setPhoneNo(dto.getPhoneNo());
				return mapper.map(userRepo.save(existingUser), UserDTO.class);
			}
		}
		throw new ResourceNotFoundException("Invalid Email Or Password");
	}
	@Override
	public UserDTO loginUser (LoginDTO dto) {
		User user = userRepo.findByEmailIdAndPassword(dto.getEmailId(),dto.getPassword());
		System.out.println("Hii "+user);
		if (user != null) {
			System.out.println("Hii "+user);
			System.out.println("LOGIN SUCCESSFULLY");
			return mapper.map(user, UserDTO.class);}
		throw new ResourceNotFoundException("Invalid Email Or Password");
	}	 
}