package com.app.controllers;

import com.app.entities.Player;
import com.app.services.ManageAuctionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/auctions")
public class ManageAuctionControlller {

    @Autowired
    private ManageAuctionService manageAuctionService;

    /**
     * Places a bid for a player.
     *
     * @param userId    the ID of the user placing the bid (mapped to the team)
     * @param playerId  the ID of the player being bid on
     * @param bidAmount the amount of the bid
     * @return a response indicating the bid was placed successfully
     */
    @PostMapping("/bids")
    public ResponseEntity<Void> placeBid(@RequestParam Long userId, 
                                         @RequestParam Long playerId, 
                                         @RequestParam Double bidAmount) {
        manageAuctionService.placeBid(userId, playerId, bidAmount);
        return ResponseEntity.ok().build();
    }

    /**
     * Retrieves the current highest bid for a player.
     *
     * @param playerId the ID of the player
     * @return the highest bid amount
     */
    @GetMapping("/bids/highest")
    public ResponseEntity<Double> getCurrentHighestBid(@RequestParam Long playerId) {
        Double highestBid = manageAuctionService.getCurrentHighestBid(playerId);
        return ResponseEntity.ok(highestBid);
    }

    /**
     * Retrieves the ID of the current highest bidder for a player.
     *
     * @param playerId the ID of the player
     * @return the ID of the highest bidder
     */
    @GetMapping("/bids/highest-bidder")
    public ResponseEntity<Long> getCurrentHighestBidder(@RequestParam Long playerId) {
        Long highestBidderId = manageAuctionService.getCurrentHighestBidder(playerId);
        return ResponseEntity.ok(highestBidderId);
    }

    /**
     * Finalizes the auction by assigning players to the highest bidding teams.
     *
     * @return a response indicating the auction was finalized successfully
     */
    @PostMapping("/finalize")
    public ResponseEntity<Void> finalizeAuction() {
        manageAuctionService.finalizeAuction();
        return ResponseEntity.ok().build();
    }

    /**
     * Retrieves all players for a given team.
     *
     * @param teamId the ID of the team
     * @return a list of players on the team
     */
    @GetMapping("/teams/{teamId}/players")
    public ResponseEntity<List<Player>> getPlayersForTeam(@PathVariable Long teamId) {
        List<Player> players = manageAuctionService.getPlayersForTeam(teamId);
        if (players.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.ok(players);
    }
}
