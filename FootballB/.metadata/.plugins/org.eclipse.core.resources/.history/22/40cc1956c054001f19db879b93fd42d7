package com.app.controllers;


import javax.validation.constraints.NotNull;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;


import com.app.dtos.LoginDTO;
import com.app.dtos.UpdateUserDTO;
import com.app.dtos.UserDTO;
import com.app.entities.User;
import com.app.services.UserService;


@RestController
@RequestMapping("/user")
//@CrossOrigin(origins = "http://localhost:3000")
@CrossOrigin("*")

@Validated
public class UserController {

	@Autowired
	private UserService userService;
	
	@PostMapping("/register")
	public ResponseEntity<?> addUser(@RequestBody @Valid UserDTO dto) {
		return ResponseEntity.status(HttpStatus.CREATED).body(userService.registerUser(dto));
	}
//	@PostMapping("/register")
//    public ResponseEntity<UserDTO> registerUser(@RequestBody @Valid UserDTO userDTO) {
//        UserDTO registeredUser = userService.registerUser(userDTO);
//        return ResponseEntity.ok(registeredUser);
//    }
//	
//	@PostMapping("/register")
//    public ResponseEntity<User> registerUser(@RequestBody UserDTO userDTO) {
//        User registeredUser = userService.registerUser(userDTO);
//        return new ResponseEntity<>(registeredUser, HttpStatus.CREATED);
//    }
	@PostMapping("/login")
	public ResponseEntity<?> loginUser(@RequestBody LoginDTO dto) {
		//System.out.println(dto.toString());
		return ResponseEntity.ok(userService.loginUser(dto));
	}

	@PutMapping("/changePassword")
	public ResponseEntity<?> changePassword(@RequestBody @Valid LoginDTO dto) {
		return ResponseEntity.ok(userService.changePassword(dto));
	}

	@PutMapping("/update/{id}")
	//@PreAuthorize("hasAnyRole('CLIENT', 'ADMIN')")
	public UserDTO updateUser(@PathVariable @NotNull(message = "User Must be Provided") Long id,
			@RequestBody @Valid UpdateUserDTO dto) {
		return userService.updateUser(id, dto);
	}
}
