//package com.app.services;
//
//import com.app.entities.Bid;
//import com.app.entities.Player;
//import com.app.entities.Team;
//import com.app.entities.User;
//import com.app.repositories.BidRepository;
//import com.app.repositories.PlayerRepository;
//import com.app.repositories.TeamRepository;
//import com.app.repositories.UserRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//
//import java.util.List;
//import java.util.Optional;
//
//@Service
//public class ManageAuctionServiceImpl implements ManageAuctionService {
//
//    @Autowired
//    private PlayerRepository playerRepository;
//
//    @Autowired
//    private TeamRepository teamRepository;
//
//    @Autowired
//    private UserRepository userRepository;
//
//    @Autowired
//    private BidRepository bidRepository;
//
//    /**
//     * Places a bid for a player by a user.
//     *
//     * @param userId    the ID of the user placing the bid
//     * @param playerId  the ID of the player being bid on
//     * @param bidAmount the amount of the bid
//     */
//    @Override
//    public void placeBid(Long userId, Long playerId, Double bidAmount) {
//        Optional<User> userOpt = userRepository.findById(userId);
//        Optional<Player> playerOpt = playerRepository.findById(playerId);
//
//        if (userOpt.isPresent() && playerOpt.isPresent()) {
//            User user = userOpt.get();
//            Player player = playerOpt.get();
//            Team team = user.getTeam();
//
//            if (team != null) {
//                Bid bid = new Bid();
//                bid.setUser(user);
//                bid.setTeam(team);
//                bid.setPlayer(player);
//                bid.setBidprice(bidAmount);
//
//                bidRepository.save(bid);
//            }
//        }
//    }
//
//    /**
//     * Retrieves the highest bid for a given player.
//     *
//     * @param playerId the ID of the player
//     * @return the highest bid amount, or 0.0 if no bids are found
//     */
//    @Override
//    public Double getCurrentHighestBid(Long playerId) {
//        return bidRepository.findHighestBidForPlayer(playerId)
//                .map(Bid::getBidprice)
//                .orElse(0.0);
//    }
//
//    /**
//     * Retrieves the user ID of the highest bidder for a given player.
//     *
//     * @param playerId the ID of the player
//     * @return the ID of the highest bidder, or null if no bids are found
//     */
//    @Override
//    public Long getCurrentHighestBidder(Long playerId) {
//        return bidRepository.findHighestBidForPlayer(playerId)
//                .map(bid -> bid.getUser().getId())
//                .orElse(null);
//    }
//
//    /**
//     * Finalizes the auction by assigning players to the teams with the highest bids.
//     */
//    @Override
//    public void finalizeAuction() {
//        List<Bid> highestBids = bidRepository.findHighestBidsForAllPlayers();
//
//        for (Bid bid : highestBids) {
//            Player player = bid.getPlayer();
//            Team team = bid.getTeam();
//
//            // No direct association of Player to Team, so logic would focus on marking or processing the bid
//            // Example: Marking the player as sold or associating the player with the bid
//            playerRepository.save(player);
//        }
//    }
//
//    /**
//     * Retrieves all players associated with a given team.
//     *
//     * @param teamId the ID of the team
//     * @return a list of players on the team
//     */
//    @Override
//    public List<Player> getPlayersForTeam(Long teamId) {
//        return bidRepository.findPlayersByTeamId(teamId);
//    }
//}
