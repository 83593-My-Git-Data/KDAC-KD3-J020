package com.app.services;

import com.app.entities.Bid;
import com.app.entities.Player;
import com.app.entities.Team;
import com.app.entities.User;
import com.app.repositories.BidRepository;
import com.app.repositories.PlayerRepository;
import com.app.repositories.TeamRepository;
import com.app.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ManageAuctionServiceImpl implements ManageAuctionService {

    @Autowired
    private PlayerRepository playerRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BidRepository bidRepository;

    @Override
    public void placeBid(Long userId, Long playerId, Double bidAmount) {
        Optional<User> userOpt = userRepository.findById(userId);
        Optional<Player> playerOpt = playerRepository.findById(playerId);

        if (userOpt.isPresent() && playerOpt.isPresent()) {
            User user = userOpt.get();
            Player player = playerOpt.get();
            Team team = user.getTeam();

            if (team != null) {
                Bid bid = new Bid();
                bid.setUser(user);
                bid.setTeam(team);
                bid.setPlayer(player);
                bid.setBidPrice(bidAmount);

                bidRepository.save(bid);
            }
        }
    }

    @Override
    public Double getCurrentHighestBid(Long playerId) {
        List<Bid> bids = bidRepository.findBidsForPlayer(playerId);
        return bids.isEmpty() ? 0.0 : bids.get(0).getBidPrice(); // Assuming the list is ordered by bid price in descending order
    }

    @Override
    public Long getCurrentHighestBidder(Long playerId) {
        List<Bid> bids = bidRepository.findBidsForPlayer(playerId);
        return bids.isEmpty() ? null : bids.get(0).getUser().getId(); // Assuming the list is ordered by bid price in descending order
    }

    @Override
    public void finalizeAuction() {
        List<Bid> highestBids = bidRepository.findHighestBidsForAllPlayers();

        for (Bid bid : highestBids) {
            Player player = bid.getPlayer();
            Team team = bid.getTeam();

            // No direct association of Player to Team, so logic would focus on marking or processing the bid
            // Example: Marking the player as sold or associating the player with the bid
            playerRepository.save(player);
        }
    }

    @Override
    public List<Player> getPlayersForTeam(Long teamId) {
        return bidRepository.findPlayersWithHighestBids(teamId);
    }
}
