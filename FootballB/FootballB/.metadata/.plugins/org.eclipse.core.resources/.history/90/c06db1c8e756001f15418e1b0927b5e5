package com.app.services;

import com.app.entities.Auction;
import com.app.entities.Bid;
import com.app.entities.Player;
import com.app.entities.Team;
import com.app.entities.User;
import com.app.repositories.AuctionRepository;
import com.app.repositories.BidRepository;
import com.app.repositories.PlayerRepository;
import com.app.repositories.TeamRepository;
import com.app.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class ManageAuctionServiceImpl implements ManageAuctionService {

    @Autowired
    private PlayerRepository playerRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BidRepository bidRepository;
    
    @Autowired
    private AuctionRepository finalAuctionRepository;

    @Override
    public void placeBid(Long userId, Long playerId, Double bidAmount) {
        Optional<User> userOpt = userRepository.findById(userId);
        Optional<Player> playerOpt = playerRepository.findById(playerId);

        if (userOpt.isPresent() && playerOpt.isPresent()) {
            User user = userOpt.get();
            Player player = playerOpt.get();
            Team team = user.getTeam();

            if (team != null) {
                Bid bid = new Bid();
                bid.setUser(user);
                bid.setTeam(team);
                bid.setPlayer(player);
                bid.setBidPrice(bidAmount);
                
                // Setting these values to avoid nulls
                bid.setUserName(user.getName());
                bid.setTeamName(team.getTeamName());
                bid.setPlayerName(player.getName());

                bidRepository.save(bid);
            }
        }
    }


    @Override
    public Double getCurrentHighestBid(Long playerId) {
        List<Bid> bids = bidRepository.findBidsForPlayer(playerId);
        return bids.isEmpty() ? 0.0 : bids.get(0).getBidPrice(); // Assuming the list is ordered by bid price in descending order
    }

    @Override
    public Long getCurrentHighestBidder(Long playerId) {
        List<Bid> bids = bidRepository.findBidsForPlayer(playerId);
        return bids.isEmpty() ? null : bids.get(0).getUser().getId(); // Assuming the list is ordered by bid price in descending order
    }

    @Override
    public void finalizeAuction() {
        // Fetch all highest bids for players
        List<Bid> highestBids = bidRepository.findHighestBidsForAllPlayers();

        // Iterate over each highest bid
        for (Bid bid : highestBids) {
            Player player = bid.getPlayer();
            Team team = bid.getTeam();
            User user = bid.getUser();
            
            // Create a FinalAuction instance for each team
            Auction finalAuction = new Auction();
            finalAuction.setUserName(user.getName());
            finalAuction.setTeamName(team.getTeamName());
            finalAuction.setAbout("Auction details...");

            // Retrieve all players for the team
            List<Player> playersInTeam = playerRepository.findPlayersByTeamId(team.getId());
            
            // Collect player names and bid prices
            List<String> playerNames = new ArrayList<>();
            List<Double> playerBidPrices = new ArrayList<>();

            for (Player p : playersInTeam) {
                Optional<Bid> playerBid = bidRepository.findBidByPlayerAndTeam(p.getId(), team.getId());
                if (playerBid.isPresent()) {
                    playerNames.add(p.getName());
                    playerBidPrices.add(playerBid.get().getBidPrice());
                } else {
                    playerNames.add(p.getName());
                    playerBidPrices.add(0.0); // Default value if no bid is found
                }
            }

            // Set player names and bid prices
            finalAuction.setPlayers(playerNames);
            finalAuction.setBidPrice(playerBidPrices);

            // Save the final auction entry
            finalAuctionRepository.save(finalAuction);
        }
    }



    @Override
    public List<Player> getPlayersForTeam(Long teamId) {
        return bidRepository.findPlayersWithHighestBids(teamId);
    }
}
